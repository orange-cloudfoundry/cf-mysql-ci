#!/bin/bash

set -eux -o pipefail

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CI_DIR="$( cd ${MY_DIR}/../../ && pwd )"
WORKSPACE_DIR="$( cd ${CI_DIR}/../ && pwd )"

source ${CI_DIR}/scripts/utils.sh

: "${ENV_TARGET_FILE:?}"

# accepts either for now
DEPLOYMENT_NAME=${DEPLOYMENT_NAME:-"${BOSH_DEPLOYMENT}"}

BOSH_ENVIRONMENT="$(cat "${ENV_TARGET_FILE}")"
BOSH_ENVIRONMENT="$(sslip_from_ip "${BOSH_ENVIRONMENT}")"
export BOSH_ENVIRONMENT

BOSH_CLIENT=${BOSH_CLIENT:-"$(jq_val "bosh_user" "${ENV_METADATA}")"}
export BOSH_CLIENT

BOSH_CLIENT_SECRET=${BOSH_CLIENT_SECRET:-"$(jq_val "bosh_password" "${ENV_METADATA}")"}
export BOSH_CLIENT_SECRET

BOSH_CA_CERT=${BOSH_CA_CERT_PATH:-"${WORKSPACE_DIR}/${ENV_REPO}/$(jq_val "env" "${ENV_METADATA}")/certs/rootCA.pem"}
export BOSH_CA_CERT

BOSH_DEPLOYMENT=${BOSH_DEPLOYMENT:-"${DEPLOYMENT_NAME}"}
export BOSH_DEPLOYMENT

set +e
check_if_deployment_exists ${DEPLOYMENT_NAME}
DEPLOYMENT_GREP_RESULT=$?
set -e

# A value of 0 indicates grep matched successfully,
# and hence the deployment exists
if [ ${DEPLOYMENT_GREP_RESULT} -eq 0 ]; then
  bosh -n delete-deployment --force
else
  echo "deployment ${DEPLOYMENT_NAME} not found - nothing to delete"
fi

#bosh -n clean-up --all
bosh disks --orphaned --json|jq -r '.Tables[].Rows[].disk_cid'|xargs -i bosh delete-disk -n {}
