---
#
# Whenever the cf-mysql-release repo is updated, run a series of integration tests and upload the artifact
# as a release candidate. Merges the develop branch into the release-candidate branch.
#

#
# Create a final release of cf-mysql release develop branch, pushing it to the master branch.
# Triggered by uploading a new version of the release notes to s3.
# Publish the release and provided release notes to github.
# Upload the tar to s3 bucket.
#

### RESOURCES

resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

resources:
- name: cf-mysql-ci-image
  type: docker-image
  source:
    username: ((core-services-ci-credentials/Notes/pivotal-docker-username))
    email: ((core-services-ci-credentials/Notes/pivotal-docker-email))
    password: ((core-services-ci-credentials/Notes/pivotal-docker-password))
    repository: cloudfoundry/cf-mysql-ci

- name: ubuntu-trusty-docker-image
  type: docker-image
  source:
    username: ((core-services-ci-credentials/Notes/pivotal-docker-username))
    email: ((core-services-ci-credentials/Notes/pivotal-docker-email))
    password: ((core-services-ci-credentials/Notes/pivotal-docker-password))
    repository: ubuntu
    tag: trusty

- name: cf-mysql-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/cf-mysql-ci.git
    branch: master
    paths:
    - scripts/Dockerfile

# these inputs require a private key so that we don't get rate limited by github
- name: bbl-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-bootloader
    access_token: ((core-services-ci-credentials/Notes/pcf-core-services-github-api-token))

- name: bosh-cli-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-cli
    access_token: ((core-services-ci-credentials/Notes/pcf-core-services-github-api-token))

- name: credhub-cli-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: credhub-cli
    access_token: ((core-services-ci-credentials/Notes/pcf-core-services-github-api-token))

- name: terraform-github-release
  type: github-release
  source:
    owner: hashicorp
    repository: terraform
    access_token: ((core-services-ci-credentials/Notes/pcf-core-services-github-api-token))

- name: bosh-lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent
    

- name: gcp-bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent

- name: xenial-bosh-lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-xenial-go_agent

- name: xenial-gcp-bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-xenial-go_agent

- name: deployments-configuration
  type: git
  source:
    uri: https://gitlab.forge.orange-labs.fr/gcl-dba-isad/cf-mysql-ci-envs.git
    branch: master
    skip_ssl_verification: true
    username: ((gitlab-username))
    password: ((gitlab-password))

- name: cf-mysql-ci
  type: git
  source:
    uri: https://github.com/orange-cloudfoundry/cf-mysql-ci.git
    branch: orange-acceptance-test

- name: routing-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/cf-routing-release

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bpm-release


- name: cf-mysql-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-deployment.git
    branch: develop
    username: ((git-username))
    password: ((git-password))

- name: cf-mysql-deployment-master
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-deployment.git
    branch: master
    username: ((git-username))
    password: ((git-password))

- name: cf-mysql-deployment-release-candidate
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-deployment.git
    branch: release-candidate
    username: ((git-username))
    password: ((git-password))

- name: runtime-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/runtime-ci
    branch: master

- name: bosh-io-release-cf-mysql-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/cf-mysql-release

- name: cf-mysql-release
  type: git
  source:
    uri: https://github.com/orange-cloudfoundry/cf-mysql-release.git
    branch: develop-pla
    username: ((git-username))
    password: ((git-password))

- name: cf-mysql-release-cipher-finder
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-release.git
    branch: develop
    username: ((git-username))
    password: ((git-password))
    paths:
    - src/github.com/cloudfoundry-incubator/cf-mysql-acceptance-tests/assets/cipher_finder/**/*

- name: cf-mysql-master
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-release.git
    branch: master
    username: ((git-username))
    password: ((git-password))

- name: cf-mysql-release-candidate
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-release.git
    branch: release-candidate
    username: ((git-username))
    password: ((git-password))

- name: full-bosh-environment
  type: pool
  source:
    uri: &pool-uri https://gitlab.forge.orange-labs.fr/gcl-dba-isad/cf-mysql-ci-envs.git
    branch: master
    pool: full-bosh
    skip_ssl_verification: true
    username: ((gitlab-username))
    password: ((gitlab-password))

- name: compiled-packages-lock
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: compiled-packages
    username: ((gitlab-username))
    password: ((gitlab-password))
    skip_ssl_verification: true

- name: cf-mysql-rc-artifacts
  type: s3
  source:
    bucket: cf-mysql-releases
    regexp: release-candidate/cf-mysql-(.*-rc.*)\.tgz
    access_key_id: ((core-services-ci-credentials/Notes/cf-mysql-ci-aws-access-key-id))
    secret_access_key: ((core-services-ci-credentials/Notes/cf-mysql-ci-aws-secret-access-key))

- name: cf-mysql-compiled-release
  type: s3
  source:
    bucket: ((cf-mysql-ci-s3-bucket))
    access_key_id: ((cf-mysql-ci-s3-access-key-id))
    secret_access_key: ((cf-mysql-ci-s3-secret-access-key))
    endpoint: ((cf-mysql-ci-s3-endpoint))
    skip_ssl_verification: true
    regexp: compiled-releases/cf-mysql-(.*)-ubuntu-trusty-(.*).tgz

- name: cf-mysql-bosh-deployment
  type: bosh-deployment
  source:
    deployment: cf-mysql


- name: version
  type: semver
  source:
    driver: git
    uri: https://gitlab.forge.orange-labs.fr/gcl-dba-isad/cf-mysql-ci-envs.git
    branch: master
    file: version
    skip_ssl_verification: true
    username: ((gitlab-username))
    password: ((gitlab-password))
    git_user: ((ci-bot-git-user))

# - name: weekly-trigger
#   type: time
#   source:
#     days:
#     - Monday
#     interval: 24h

- name: s3-resource-final-release
  type: s3
  source:
    bucket: ((cf-mysql-ci-s3-bucket))
    regexp: final/cf-mysql-(.*)-ubuntu-trusty-(.*).tgz
    access_key_id: ((cf-mysql-ci-s3-access-key-id))
    secret_access_key: ((cf-mysql-ci-s3-secret-access-key))
    endpoint: ((cf-mysql-ci-s3-endpoint))
    skip_ssl_verification: true

- name: publish-github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: cf-mysql-release
    access_token: ((core-services-ci-credentials/Notes/git-writer-github-access-token))

- name: release-notes
  type: s3
  source:
    bucket: cf-mysql-release-notes
    regexp: RELEASE_NOTES_v(.*)
    access_key_id: ((core-services-ci-credentials/Notes/cf-mysql-ci-aws-access-key-id))
    secret_access_key: ((core-services-ci-credentials/Notes/cf-mysql-ci-aws-secret-access-key))

### JOBS
jobs:
- name: build-dockerfile
  plan:
  - aggregate:
    - get: ubuntu-trusty-docker-image
      trigger: true
    - get: cf-mysql-dockerfile
      trigger: true
    - get: bbl-github-release
      trigger: true
    - get: credhub-cli-github-release
      trigger: true
    - get: bosh-cli-github-release
      trigger: true
    - get: terraform-github-release
      trigger: true
    - get: cf-mysql-ci
  - task: generate-docker-build-args-file
    file: cf-mysql-ci/ci/tasks/generate-docker-build-args-file.yml
  - put: cf-mysql-ci-image
    params:
      build: cf-mysql-dockerfile/scripts/
      build_args_file: docker-build-args/docker-build-args.json

- name: update-acceptance-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
    - get: cf-mysql-release-cipher-finder
      trigger: true
  - task: build-and-upload-cipher-finder-jar
    file: cf-mysql-ci/ci/tasks/update-acceptance-tests/build-and-upload-cipher-finder-jar.yml
    params:
      BLOBS_BUCKET_NAME: mysql-service-blobs
      AWS_ACCESS_KEY_ID: ((core-services-ci-credentials/Notes/cf-mysql-publish-blobs-aws-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((core-services-ci-credentials/Notes/cf-mysql-publish-blobs-aws-secret-access-key))
  - put: cf-mysql-release
    params:
      repository: cf-mysql-release-changed

- name: test-unit
  serial_groups: [version_bumper]
  serial: true
  plan:
  - aggregate:
    - get: cf-mysql-ci
    # - get: weekly-trigger
    #   trigger: true
    - get: cf-mysql-release
      trigger: true
    - get: cf-mysql-deployment
      trigger: true
    - get: version
  - aggregate:
    - task: test-unit
      file: cf-mysql-ci/ci/tasks/test-unit.yml
      attempts: 5
    - task: test-integration
      file: cf-mysql-ci/ci/tasks/test-integration.yml
    - task: test-broker
      file: cf-mysql-ci/ci/tasks/test-broker.yml
    - task: test-broker-dependencies
      config:
        platform: &platform linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.3.1'
        inputs:
        - name: cf-mysql-release
        run:
          path: bash
          args:
          - -c
          - |
            set -eux

            gem install bundler-audit
            bundle-audit update

            cd cf-mysql-release/src/cf-mysql-broker

            bundle-audit
  - put: version
    params:
      pre: rc

- name: create-and-compile-release
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-unit]
    - get: cf-mysql-deployment
      passed: [test-unit]
      trigger: true
    - get: cf-mysql-ci
    - get: gcp-bosh-stemcell
      trigger: true
    - get: bosh-lite-stemcell
      trigger: true
    - get: version
      passed: [test-unit]
      trigger: true
  - task: gate-on-stemcells
    file: cf-mysql-ci/ci/tasks/create-and-compile-release/gate-on-stemcells.yml
  - &create-release
    task: create-release
    file: cf-mysql-ci/ci/tasks/create-release.yml
    input_mapping: {release-repo: cf-mysql-release}
    params:
      RELEASE_NAME: cf-mysql
  - put: compiled-packages-lock
    params:
      acquire: true
  - &compile-release
    task: compile-release
    config:
      platform: &platform linux
      image_resource: &image_resource
        type: docker-image
        source:
          repository: cloudfoundry/cf-mysql-ci
      inputs:
      - name: cf-mysql-ci
      - name: release-tarball
      - name: gcp-bosh-stemcell
      outputs:
      - name: compiled-release-tarball
      params:
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        BOSH_ENVIRONMENT: ((bosh-server.ip))
        BOSH_CA_CERT: ((bosh-server.ca))
        BOSH_ALL_PROXY: ((bosh-server.all_proxy))
        BOSH_JUMPBOX_PRIVATE_KEY: ((bosh-server.jumpbox_private_key))
      run:
        path: cf-mysql-ci/scripts/compile_release
    ensure:
      put: compiled-packages-lock
      params:
        release: compiled-packages-lock
  - put: cf-mysql-compiled-release
    params:
      file: compiled-release-tarball/*.tgz

- name: test-full-bosh
  serial_groups: [boshlitecf]
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
    - get: cf-mysql-deployment
      passed: [create-and-compile-release]
      trigger: true
    - put: full-bosh-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: deployments-configuration
    - get: gcp-bosh-stemcell
      passed: [create-and-compile-release]
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: routing-release
    - get: version
      passed: [create-and-compile-release]
      trigger: true
  - try:
      task: run-deregister-and-purge-instances
      config:
        platform: linux
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: full-bosh-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: full-bosh-environment/name
          ENV_METADATA: full-bosh-environment/metadata
          ERRAND: deregister-and-purge-instances
          SKIP_IF_NO_DEPLOYMENT: true
          BOSH_DEPLOYMENT: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh-lite-orange/run_errand_gcp
  - task: delete-deployment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: full-bosh-environment
      - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: full-bosh-environment/name
        ENV_METADATA: full-bosh-environment/metadata
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment_gcp
  - task: create-cf-mysql-vars
    input_mapping:
      deployments-core-services: deployments-configuration
      environment: full-bosh-environment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: deployments-core-services
      - name: cf-mysql-ci
      - name: environment
      outputs:
      - name: cf-mysql-vars
      run:
        path: cf-mysql-ci/scripts/full-bosh-orange/create-cf-mysql-vars
  - put: cf-mysql-bosh-deployment
    params:
      source_file: full-bosh-environment/metadata
      manifest: cf-mysql-deployment/cf-mysql-deployment.yml
      ops_files:
      - cf-mysql-deployment/operations/latest-versions.yml
      - cf-mysql-deployment/operations/add-broker.yml
      - cf-mysql-deployment/operations/register-proxy-route.yml
      - cf-mysql-ci/operations/default-vcap-password.yml
      - cf-mysql-ci/operations/default-vcap-password-broker.yml
      - cf-mysql-ci/operations/enable-remote-admin-access.yml
      releases:
      - routing-release/*.tgz
      - compiled-release-tarball/*.tgz
      stemcells: [gcp-bosh-stemcell/*.tgz]
      vars_files:
      - cf-mysql-vars/cf-mysql-vars.yml
  - task: run-broker-registrar
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: full-bosh-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: full-bosh-environment/name
        ENV_METADATA: full-bosh-environment/metadata
        ERRAND: broker-registrar
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh-lite-orange/run_errand_gcp
  - task: run-smoke-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: full-bosh-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: full-bosh-environment/name
        ENV_METADATA: full-bosh-environment/metadata
        ERRAND: smoke-tests
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand_gcp
  - task: acceptance-test
    attempts: 3
    input_mapping:
      deployments-core-services: deployments-configuration
      environment: full-bosh-environment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: deployments-core-services
        - name: environment
      params:
        TEST_TYPE: acceptance
      run:
        path: cf-mysql-ci/scripts/bosh-lite-orange/acceptance-tests
  - try:
      task: run-deregister-and-purge-instances
      config:
        platform: linux
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: full-bosh-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: full-bosh-environment/name
          ENV_METADATA: full-bosh-environment/metadata
          ERRAND: deregister-and-purge-instances
          SKIP_IF_NO_DEPLOYMENT: true
          BOSH_DEPLOYMENT: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh-lite-orange/run_errand_gcp
  - task: delete-deployment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: full-bosh-environment
      - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: full-bosh-environment/name
        ENV_METADATA: full-bosh-environment/metadata
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment_gcp
  - put: full-bosh-environment
    params:
      release: full-bosh-environment

### SCALING
- name: test-scaling
  serial_groups: [boshlite]
  plan:
  - &ondemand-setup
    do:
    - aggregate:
      - get: bpm-release
      - get: cf-mysql-release
        passed: [create-and-compile-release]
      - get: cf-mysql-deployment
        passed: [create-and-compile-release]
        trigger: true
      - get: cf-mysql-ci
      - get: compiled-release-tarball
        resource: cf-mysql-compiled-release
        passed: [create-and-compile-release]
      - get: deployments
        resource: deployments-configuration
      - get: stemcell
        resource: bosh-lite-stemcell
        passed: [create-and-compile-release]
      - get: version
        passed: [create-and-compile-release]
        trigger: true
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
    - aggregate:
      - task: make-manifest
        file: cf-mysql-ci/ci/tasks/make-manifest.yml
        params:
          ENABLE_REMOTE_ADMIN_ACCESS: true
          NETWORK_DEF: true
    - &ondemand-deploy-manifest
      put: cf-mysql-bosh-deployment
      params:
        manifest: deployment-manifest/deployment.yml
        releases:
        - bpm-release/*.tgz
        - compiled-release-tarball/*.tgz
        stemcells:
        - stemcell/*.tgz
        source_file: bosh-lite-info/bosh-deployment-resource-source-file
  - &run-smoke-tests-ondemand
    task: run-smoke-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_DEPLOYMENT: cf-mysql
        ERRAND: smoke-tests
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-scaling-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-deployment
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ENABLE_REMOTE_ADMIN_ACCESS: true
        NETWORK_DEF: true
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-test
  - &ondemand-teardown
      do:
      - task: delete-deployment
        config:
          platform: linux
          image_resource: *image_resource
          inputs:
          - name: cf-mysql-ci
          - name: bosh-lite-info
          params:
            BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
            BOSH_CLIENT: ((bosh-lite.user))
            BOSH_CLIENT_SECRET: ((bosh-lite.password))
            BOSH_DEPLOYMENT: cf-mysql
            ENV_TARGET_FILE: bosh-lite-info/director-url
          run:
            path: cf-mysql-ci/scripts/bosh/delete_deployment

### ARB-TO-FULL-SCALING
# Verify that replication works in several different topologies
- name: test-arb-to-full-scaling
  serial_groups: [boshlite]
  plan:
  - *ondemand-setup
  - *run-smoke-tests-ondemand
  - task: run-arb-to-full-scaling-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-deployment
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ENABLE_REMOTE_ADMIN_ACCESS: true
        NETWORK_DEF: true
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-arb-to-full-test
  - *ondemand-teardown

### TLS
- name: test-tls
  serial_groups: [boshlitecf]
  plan:
  - do:
    - aggregate:
      - get: cf-mysql-release
        passed: [create-and-compile-release]
      - get: cf-mysql-deployment
        passed: [create-and-compile-release]
        trigger: true
      - get: cf-mysql-ci
      - get: compiled-release-tarball
        resource: cf-mysql-compiled-release
        passed: [create-and-compile-release]
      - get: deployments
        resource: deployments-configuration
      - get: routing-release
      - get: stemcell
        resource: bosh-lite-stemcell
        passed: [create-and-compile-release]
#      - get: xenial-bosh-lite-stemcell
      - get: version
        passed: [create-and-compile-release]
        trigger: true
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite-cf
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
    - task: make-manifest
      config:
        platform: linux
        image_resource: *image_resource
        inputs:
        - name: bosh-lite-info
        - name: varstore
        - name: cf-mysql-ci
        - name: cf-mysql-deployment
        - name: url
        outputs:
        - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ADD_BROKERS: true
          ADD_TLS: true
          FAKE_CA: true
          DISABLE_CROSS_DEPLOYMENT_LINKS: false
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make-manifest
    - put: cf-mysql-bosh-deployment
      params:
        manifest: deployment-manifest/deployment.yml
        releases:
        - compiled-release-tarball/*.tgz
        - routing-release/*.tgz
        stemcells:
        - stemcell/*.tgz
        source_file: bosh-lite-info/bosh-deployment-resource-source-file
  - task: run-broker-registrar
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ERRAND: broker-registrar
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
#  - task: test-tls
#    config:
#      platform: linux
#      image_resource: *image_resource
#      inputs:
#      - name: cf-mysql-ci
#      - name: url
#      - name: varstore
#      run:
#        path: cf-mysql-ci/scripts/tls/verify-tls-enabled
  - task: run-smoke-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ERRAND: smoke-tests
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-cf-mysql-deployment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: bosh-lite-info
      params:
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_DEPLOYMENT: cf-mysql
        ENV_TARGET_FILE: bosh-lite-info/director-url
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment

### FAILOVER
- name: test-failover
  serial_groups: [boshlitecf]
  plan:
  - do:
    - aggregate:
      - get: cf-mysql-release
        passed: [create-and-compile-release]
      - get: cf-mysql-deployment
        passed: [create-and-compile-release]
        trigger: true
      - get: cf-mysql-ci
      - get: compiled-release-tarball
        resource: cf-mysql-compiled-release
        passed: [create-and-compile-release]
      - get: deployments
        resource: deployments-configuration
      - get: stemcell
        resource: bosh-lite-stemcell
        passed: [create-and-compile-release]
      - get: version
        passed: [create-and-compile-release]
        trigger: true
      - get: routing-release
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite-cf
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))      
    - task: make-manifest
      config:
        platform: linux
        image_resource: *image_resource
        inputs:
        - name: varstore
        - name: cf-mysql-ci
        - name: cf-mysql-deployment
        - name: url
        outputs:
        - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ADD_BROKERS: true
          ENABLE_REMOTE_ADMIN_ACCESS: true
          DISABLE_CROSS_DEPLOYMENT_LINKS: false
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make-manifest
    - put: cf-mysql-bosh-deployment
      params:
        manifest: deployment-manifest/deployment.yml
        releases:
        - compiled-release-tarball/*.tgz
        - routing-release/*.tgz
        stemcells:
        - stemcell/*.tgz
        source_file: bosh-lite-info/bosh-deployment-resource-source-file
  - task: run-broker-registrar
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ERRAND: broker-registrar
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-smoke-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        ERRAND: smoke-tests
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-failover-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-release
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_DEPLOYMENT: cf-mysql
        NEW_STYLE_PROXY_URL: true
      run:
        path: cf-mysql-ci/scripts/failover/failover-test
  - task: delete-cf-mysql-deployment
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: bosh-lite-info
      params:
        BOSH_CLIENT: ((bosh-server.user))
        BOSH_CLIENT_SECRET: ((bosh-server.password))
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_DEPLOYMENT: cf-mysql
        ENV_TARGET_FILE: bosh-lite-info/director-url
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment

### UPGRADE
- name: test-upgrade-from-previous
  serial_groups: [boshlite]
  plan:
  - aggregate:
    - get: bpm-release
    - get: cf-mysql-release-develop
      resource: cf-mysql-release
      passed: [create-and-compile-release]
    - get: cf-mysql-deployment-develop
      resource: cf-mysql-deployment
      passed: [create-and-compile-release]
      trigger: true
    - get: cf-mysql-deployment
      resource: cf-mysql-deployment-master
    - get: cf-mysql-ci
    - get: release-tarball
      resource: cf-mysql-compiled-release
    - get: deployments
      resource: deployments-configuration
    - get: stemcell
      resource: bosh-lite-stemcell
      passed: [create-and-compile-release]
    - get: gcp-bosh-stemcell
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
      trigger: true
    - get: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - aggregate:
    - task: make-manifest
      file: cf-mysql-ci/ci/tasks/make-manifest.yml
      params:
        ENABLE_REMOTE_ADMIN_ACCESS: true
        NETWORK_DEF: true
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
    - do:
      - put: compiled-packages-lock
        params:
          acquire: true
      - *compile-release
  - *ondemand-deploy-manifest
  - task: persistence-test-data-write
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-info
      - name: cf-mysql-ci
      params:
        MYSQL_TUNNEL_USERNAME: jumpbox
        MYSQL_VM_IP: 10.244.7.3
        ENV_TARGET_FILE: bosh-lite-info/external-ip
        SSH_KEY_FILE: bosh-lite-info/jumpbox-private-key
      run:
        path: cf-mysql-ci/scripts/persistence/load-test-data

  - task: make-manifest
    file: cf-mysql-ci/ci/tasks/make-manifest.yml
    input_mapping:
      cf-mysql-deployment: cf-mysql-deployment-develop
    params:
      ENABLE_REMOTE_ADMIN_ACCESS: true
      NETWORK_DEF: true

  - put: cf-mysql-bosh-deployment
    params:
      manifest: deployment-manifest/deployment.yml
      releases:
      - bpm-release/*.tgz
      - cf-mysql-compiled-release/*.tgz
      stemcells:
      - stemcell/*.tgz
      source_file: bosh-lite-info/bosh-deployment-resource-source-file

  - task: persistence-test-data-read
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-info
      - name: cf-mysql-ci
      params:
        ENV_TARGET_FILE: bosh-lite-info/external-ip
        MYSQL_VM_IP: 10.244.7.3
      run:
        path: cf-mysql-ci/scripts/persistence/verify-db-matches-test-data

  - *run-smoke-tests-ondemand
  - *ondemand-teardown

### STANDALONE FOR BOOTSTRAP
- name: test-bootstrap
  serial_groups: [boshlite]
  plan:
  - *ondemand-setup
  - task: persistence-test-data-write
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-info
      - name: cf-mysql-ci
      params:
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/persistence/load-test-data
  - task: break-mysql-cluster
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: bosh-lite-info
      params:
        ENV_TARGET_FILE: bosh-lite-info/external-ip
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bootstrap/break-mysql-cluster
  - task: bootstrap
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
      - name: bosh-lite-info
      - name: cf-mysql-ci
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_DEPLOYMENT: cf-mysql
        ERRAND: bootstrap
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: persistence-test-data-read
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-info
      - name: cf-mysql-ci
      params:
        ENV_TARGET_FILE: bosh-lite-info/external-ip
      run:
        path: cf-mysql-ci/scripts/persistence/verify-db-matches-test-data
  - *ondemand-teardown

### DATA LOSS
- name: test-interruptor-prevents-data-loss
  serial_groups: [boshlite]
  plan:
  - *ondemand-setup
  - task: make-manifest-with-interruptor-enabled
    file: cf-mysql-ci/ci/tasks/make-manifest.yml
    params:
      ENABLE_INTERRUPTOR: true
      ENABLE_REMOTE_ADMIN_ACCESS: true
      NETWORK_DEF: true
  - *ondemand-deploy-manifest
  - task: run-data-loss-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/data-loss/force-sst-test
  - task: run-rejoin-unsafe-errand
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        BOSH_CA_CERT_PATH: bosh-lite-info/ca-cert
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_DEPLOYMENT: cf-mysql
        ERRAND: rejoin-unsafe
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - *ondemand-teardown

### DISABLE AUTO SST
- name: test-interruptor-can-be-disabled
  serial_groups: [boshlite]
  plan:
  - *ondemand-setup
  - task: make-manifest-with-interruptor-enabled
    file: cf-mysql-ci/ci/tasks/make-manifest.yml
    params:
      ENABLE_INTERRUPTOR: true
      ENABLE_REMOTE_ADMIN_ACCESS: true
      NETWORK_DEF: true
  - *ondemand-deploy-manifest
  - task: run-data-loss-tests # leaves cluster in broken state with node z2 down
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/data-loss/force-sst-test
  - task: make-manifest-with-interruptor-disabled
    file: cf-mysql-ci/ci/tasks/make-manifest.yml
    params:
      ENABLE_REMOTE_ADMIN_ACCESS: true
      NETWORK_DEF: true
  - *ondemand-deploy-manifest
  - task: restart-broken-node
    attempts: 5
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        ENV_TARGET_FILE: bosh-lite-info/director-url
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        BOSH_DEPLOYMENT: cf-mysql
      run:
        path: cf-mysql-ci/scripts/data-loss/restart-broken-node
  - *ondemand-teardown

### VERIFY CLUSTER SCHEMAS
- name: test-verify-cluster-schemas
  serial_groups: [boshlite]
  plan:
  - *ondemand-setup
  - task: make-manifest
    file: cf-mysql-ci/ci/tasks/make-manifest.yml
    params:
      TINY_GCACHE: true #TODO: do we need this?
      ENABLE_REMOTE_ADMIN_ACCESS: true
      NETWORK_DEF: true
  - *ondemand-deploy-manifest
  - task: run-verify-cluster-schemas-tests
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-release
      params:
        MYSQL_TUNNEL_USERNAME: jumpbox
        ENV_TARGET_FILE: bosh-lite-info/director-url
        DIRECTOR_IP: bosh-lite-info/external-ip
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        SSH_KEY_FILE: bosh-lite-info/jumpbox-private-key
        BOSH_DEPLOYMENT: cf-mysql
        BOSH_CA_CERT: bosh-lite-info/ca-cert
      run:
        path: cf-mysql-ci/scripts/verify-cluster-schemas/force-divergent-schemas-test
  - *ondemand-teardown

### VERIFY NO REMOTE ACCESS
- name: test-verify-no-remote-access
  serial_groups: [boshlite]
  plan:
  - do:
    - aggregate:
      - get: bpm-release
      - get: cf-mysql-release
        passed: [create-and-compile-release]
      - get: cf-mysql-deployment
        passed: [create-and-compile-release]
        trigger: true
      - get: cf-mysql-ci
      - get: compiled-release-tarball
        resource: cf-mysql-compiled-release
        passed: [create-and-compile-release]
      - get: deployments
        resource: deployments-configuration
      - get: stemcell
        resource: bosh-lite-stemcell
        passed: [create-and-compile-release]
      - get: version
        passed: [create-and-compile-release]
        trigger: true
    - aggregate:
      - task: make-manifest
        file: cf-mysql-ci/ci/tasks/make-manifest.yml
        params:
          ENABLE_REMOTE_ADMIN_ACCESS: false
          MINIMAL_MODE: true
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password)) 
  - *ondemand-deploy-manifest
  - task: run-verify-no-remote-access
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
      params:
        MYSQL_TUNNEL_USERNAME: jumpbox
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        ENV_TARGET_FILE: bosh-lite-info/external-ip
        SSH_KEY_FILE: bosh-lite-info/jumpbox-private-key
      run:
        path: cf-mysql-ci/scripts/remote-access/verify-no-remote-access
  - *ondemand-teardown

### VERIFY TUNING WORKS
- name: test-verify-tuning
  serial_groups: [boshlite]
  plan:
  - do:
    - aggregate:
      - get: bpm-release
      - get: cf-mysql-release
        passed: [create-and-compile-release]
      - get: cf-mysql-deployment
        passed: [create-and-compile-release]
        trigger: true
      - get: cf-mysql-ci
      - get: compiled-release-tarball
        resource: cf-mysql-compiled-release
        passed: [create-and-compile-release]
      - get: deployments
        resource: deployments-configuration
      - get: stemcell
        resource: bosh-lite-stemcell
        passed: [create-and-compile-release]
      - get: version
        passed: [create-and-compile-release]
        trigger: true
    - aggregate:
      - task: make-manifest
        file: cf-mysql-ci/ci/tasks/make-manifest.yml
        params:
          ENABLE_REMOTE_ADMIN_ACCESS: true
          MINIMAL_MODE: true
    - task: bosh-lite-env
      file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
      params:
        BOSH_LITE_REPO: deployments/bosh-lite
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))  
  - *ondemand-deploy-manifest
  - task: run-verify-tuning
    config:
      platform: linux
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-info
        - name: cf-mysql-deployment
        - name: cf-mysql-release
      params:
        MYSQL_TUNNEL_USERNAME: jumpbox
        ENV_TARGET_FILE: bosh-lite-info/external-ip
        BOSH_CLIENT: ((bosh-lite.user))
        BOSH_CLIENT_SECRET: ((bosh-lite.password))
        SSH_KEY_FILE: bosh-lite-info/jumpbox-private-key
        BOSH_DEPLOYMENT: cf-mysql
        MINIMAL_MODE: true
        ENABLE_REMOTE_ADMIN_ACCESS: true
      run:
        path: cf-mysql-ci/scripts/tuning/verify-tuning
  - *ondemand-teardown

### XENIAL
- name: test-xenial
  serial_groups: [boshlite]
  plan:
  - aggregate:
    - get: bpm-release
    - get: cf-mysql-release
      passed: [create-and-compile-release]
    - get: cf-mysql-deployment
      passed: [create-and-compile-release]
      trigger: true
    - get: cf-mysql-ci
    - get: deployments
      resource: deployments-configuration
    - get: stemcell
      resource: xenial-bosh-lite-stemcell
    - get: gcp-bosh-stemcell
      resource: xenial-gcp-bosh-stemcell
    - get: version
      passed: [create-and-compile-release]
      trigger: true
  - task: gate-on-stemcells
    input_mapping: {bosh-lite-stemcell: stemcell}
    file: cf-mysql-ci/ci/tasks/create-and-compile-release/gate-on-stemcells.yml
  - aggregate:
    - do:
      - task: bosh-lite-env
        file: cf-mysql-ci/ci/tasks/orange/bosh-lite-env.yml
        params:
          BOSH_LITE_REPO: deployments/bosh-lite
          BOSH_CLIENT: ((bosh-lite.user))
          BOSH_CLIENT_SECRET: ((bosh-lite.password))     
    - do:
      - *create-release
      - put: compiled-packages-lock
        params:
          acquire: true
      - task: compile-release
        config:
          platform: linux
          image_resource: *image_resource
          inputs:
          - name: cf-mysql-ci
          - name: release-tarball
          - name: gcp-bosh-stemcell
          outputs:
          - name: compiled-release-tarball
          params:
            BOSH_CLIENT: ((bosh-server.user))
            BOSH_CLIENT_SECRET: ((bosh-server.password))
            BOSH_ENVIRONMENT: ((bosh-server.ip))
            BOSH_CA_CERT: ((bosh-server.ca))
            BOSH_ALL_PROXY: ((bosh-server.all_proxy))
            BOSH_JUMPBOX_PRIVATE_KEY: ((bosh-server.jumpbox_private_key))
            STEMCELL_LINE: ubuntu-xenial
          run:
            path: cf-mysql-ci/scripts/compile_release
        ensure:
          put: compiled-packages-lock
          params:
            release: compiled-packages-lock
  - put: cf-mysql-bosh-deployment
    params:
      manifest: cf-mysql-deployment/cf-mysql-deployment.yml
      ops_files:
      - cf-mysql-ci/operations/increase-proxy-healthcheck-timeout.yml
      - cf-mysql-ci/operations/minimal-mode.yml
      - cf-mysql-deployment/operations/xenial-stemcell.yml
      releases:
      - bpm-release/*.tgz
      - compiled-release-tarball/*.tgz
      stemcells:
      - stemcell/*.tgz
      source_file: bosh-lite-info/bosh-deployment-resource-source-file
  - *run-smoke-tests-ondemand
  - *ondemand-teardown

- name: upload-rc-artifacts
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - test-full-bosh
      - test-scaling
      - test-failover
      - test-verify-cluster-schemas
      - test-interruptor-prevents-data-loss
      - test-interruptor-can-be-disabled
      - test-bootstrap
      - test-upgrade-from-previous
      - test-arb-to-full-scaling
      - test-verify-no-remote-access
      - test-verify-tuning
      - test-tls
      - test-xenial
      trigger: true
    - get: cf-mysql-ci
    - get: version
      passed:
      - test-full-bosh
      - test-scaling
      - test-failover
      - test-verify-cluster-schemas
      - test-interruptor-prevents-data-loss
      - test-interruptor-can-be-disabled
      - test-bootstrap
      - test-upgrade-from-previous
      - test-arb-to-full-scaling
      - test-verify-no-remote-access
      - test-verify-tuning
      - test-tls
      - test-xenial
  - *create-release
  - put: cf-mysql-rc-artifacts
    params:
      file: release-tarball/cf-mysql*.tgz

- name: promote-to-rc
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - test-full-bosh
      - test-scaling
      - test-failover
      - test-verify-cluster-schemas
      - test-interruptor-prevents-data-loss
      - test-interruptor-can-be-disabled
      - test-bootstrap
      - test-upgrade-from-previous
      - test-arb-to-full-scaling
      - test-verify-no-remote-access
      - test-verify-tuning
      - test-tls
      - test-xenial
      trigger: true
      params:
        fetch: [release-candidate]
    - get: cf-mysql-deployment
      passed:
      - test-full-bosh
      - test-scaling
      - test-failover
      - test-verify-cluster-schemas
      - test-interruptor-prevents-data-loss
      - test-interruptor-can-be-disabled
      - test-bootstrap
      - test-upgrade-from-previous
      - test-arb-to-full-scaling
      - test-verify-no-remote-access
      - test-verify-tuning
      - test-tls
      - test-xenial
    - get: cf-mysql-ci
    - get: version
      passed:
      - test-full-bosh
      - test-scaling
      - test-failover
      - test-verify-cluster-schemas
      - test-interruptor-prevents-data-loss
      - test-interruptor-can-be-disabled
      - test-bootstrap
      - test-upgrade-from-previous
      - test-arb-to-full-scaling
      - test-verify-no-remote-access
      - test-verify-tuning
      - test-tls
      - test-xenial
    - get: gcp-bosh-stemcell
      passed: [test-full-bosh]
  - aggregate:
    - put: cf-mysql-release-candidate
      params:
        repository: cf-mysql-release
    - put: cf-mysql-deployment-release-candidate
      params:
        repository: cf-mysql-deployment

- name: final-release
  serial_groups: [version-bumper]
  plan:
    - aggregate:
      - get: cf-mysql-release
        passed: [promote-to-rc]
      - get: cf-mysql-deployment-release-candidate
        passed: [promote-to-rc]
      - get: cf-mysql-ci
      - get: release-notes
      - get: version
        passed: [promote-to-rc]
        params:
          bump: final
      - get: gcp-bosh-stemcell
        passed: [promote-to-rc]
    - task: create-mysql-release
      file: cf-mysql-ci/ci/tasks/create-release.yml
      input_mapping: {release-repo: cf-mysql-release}
      output_mapping: {release-repo-modified: cf-mysql-release-final}
      params:
        RELEASE_NAME: cf-mysql
        BLOBS_BUCKET_NAME: mysql-service-blobs
        FINAL: true
        AWS_ACCESS_KEY_ID: ((core-services-ci-credentials/Notes/cf-mysql-publish-blobs-aws-access-key-id))
        AWS_SECRET_ACCESS_KEY: ((core-services-ci-credentials/Notes/cf-mysql-publish-blobs-aws-secret-access-key))
    - task: commit-final-release-changes
      config:
        platform: linux
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release-final
        - name: commit-message
        outputs:
        - name: cf-mysql-release-committed
        params:
          GIT_COMMIT_MESSAGE: commit-message/commit-message
          REPO_DIR: cf-mysql-release-final
          OUTPUT_DIR: cf-mysql-release-committed
        run:
          path: cf-mysql-ci/scripts/publish/git-commit-changes
    - task: prep-github-release
      config:
        platform: linux
        image_resource: *image_resource
        params:
          RELEASE_DIR: cf-mysql-release
        inputs:
        - name: release-notes
        - name: cf-mysql-ci
        - name: cf-mysql-release-committed
        - name: version
        outputs:
        - name: output-release-dir
        run:
          path: cf-mysql-ci/scripts/publish/prep-github-release
    - put: cf-mysql-master
      params:
        repository: cf-mysql-release-committed/cf-mysql-release-final
        tag: output-release-dir/release-tag
    - put: version
      params:
        bump: minor
        pre: rc
    - put: s3-resource-final-release
      params:
        file: release-tarball/cf-mysql-*.tgz
    - put: publish-github-release
      params:
        name: output-release-dir/release-tag
        tag: output-release-dir/release-tag
        body: output-release-dir/generated-release-notes
        commitish: output-release-dir/git-commit

- name: finalize-cf-mysql-deployment
  plan:
    - aggregate:
      - get: cf-mysql-deployment-release-candidate
        passed: [final-release]
      - get: cf-mysql-deployment-master
      - get: bosh-io-release-cf-mysql-release
        trigger: true
      - get: runtime-ci
      - get: gcp-bosh-stemcell
        passed: [final-release]
      - get: cf-mysql-ci
    - put: cf-mysql-deployment-master
      params:
        repository: cf-mysql-deployment-release-candidate
        merge: true
    - task: update-cf-mysql-deployment-with-new-release
      file: cf-mysql-ci/ci/tasks/finalize-cf-mysql-deployment/update-cf-mysql-deployment-with-new-release.yml
    - task: configure-tag-name
      file: cf-mysql-ci/ci/tasks/finalize-cf-mysql-deployment/configure-tag-name.yml
    - put: cf-mysql-deployment-master
      params:
        repository: updated-cf-mysql-deployment-master
        tag: tag-name/name

- name: merge-cf-mysql-deployment-master-into-develop
  plan:
  - get: cf-mysql-deployment-master
    trigger: true
  - put: cf-mysql-deployment
    params:
      repository: cf-mysql-deployment-master
      merge: true

- name: merge-master-into-develop
  plan:
  - get: cf-mysql-master
    trigger: true
  - put: cf-mysql-release
    params:
      repository: cf-mysql-master
      merge: true

- name: bump-minor
  plan:
  - aggregate:
    - get: version
      params:
        bump: minor
  - put: version
    params:
      file: version/version

- name: bump-major
  plan:
  - aggregate:
    - get: version
      params:
        bump: major
  - put: version
    params:
      file: version/version
